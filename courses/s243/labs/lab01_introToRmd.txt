---
title: "Lab 1: Introduction to R Markdown"
author: "OpenIntro Biostatistics; revised T.Scofield"
date: "January 2020 (rev. Jan. 2024)"
output: pdf_document
---

### Orientation

This is an R Markdown (Rmd) document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. It was designed to simplify creating HTML documents, but the labs for this text are written to generate PDF documents.

---

\textcolor{brown}{[Only necessary if you run RStudio on your local computer
instead of the server:] Before continuing, be sure to install a TeX distribution; one easy option is the TinyTex distribution that can be installed via R (\url{https://yihui.org/tinytex/}).}\footnote{Alternatively, a full TeX distribution can be downloaded from \url{https://www.latex-project.org/get/}.}

\textcolor{brown}{
To install the TinyTex distribution, run the following commands. The commands appear in a grey box; click the green play button in the upper right hand corner to run both lines:
}

```{r, eval = FALSE}
# Skip, if running RStudio from the server
install.packages('tinytex')
tinytex::install_tinytex()
```

\textcolor{brown}{
To install the *oibiostat* data package, run the code in the following chunk. The package only needs to be installed once. 
}

```{r, eval = FALSE}
# Skip if running RStudio from the server
install.packages("devtools")
devtools::install_github("OI-Biostat/oi_biostat_data")
```

---

The content of an R Markdown document is created in the R Studio script editor. Formatting commands in the text are converted to a PDF document when you click on the *Knit* button, located on the toolbar at the top of the script editor.

In R Studio, the menu item *File > New File > R Markdown...* choice produces a dialog box for output type. To create a new document, select *Document* from the left side of the dialog box, enter a name and title, choose PDF, and select OK. A template will open in the script editor, with file extension .Rmd.

### Getting Started

The first six lines of this file are referred to as the **header**. R Markdown is very fussy about the form of the header---the three dashed lines above and below lines 2-5 must appear exactly as in this document, and there must be a blank space between the colon and the descriptive text. Also, the title, author, and date fields must be kept within double quotes. The output line specifies the output format as PDF. 

1. First, rename this file to include your first initial and last name -- e.g., 01_intro_to_Rmd_j_vu.Rmd. (Use *File > Save As...*)

2. In this document, edit the header to include your name and today's date. Click *Knit PDF*. This should produce a PDF file located in the same folder as the Rmd file, with a name like 01_intro_to_Rmd_j_vu.pdf. Note that the file name for a PDF created from an Rmd document will be the same, except with a different file extension. The file name and title of the document, however, can be different.

Plain text is prepared in paragraphs, as in the first part of this document. *Text* enclosed in asterisks is *italicized* in the PDF output. **Text** enclosed in double asterisks appears in **bold font**.  There must be no space between the asterisks and the enclosed text.

3. Write a brief paragraph describing previous coursework in statistics (if any) and share your motivation for learning statistics with R. *Knit* the document. Note that each time you *knit* the document, the output overwrites the previous version.

Your paragraph...


Bulleted lists are produced using the formatting syntax: 

- Item 1 
- Item 2 
    + Item 2a
    + Item 2b

The list must be preceded by a blank line, and 4 spaces should be used before sub-items.

4. Write a bulleted list giving your year of graduation, your field of study, and the country you are from.  Under the entry for your country, prepare subitems with the name of your state and city. *Knit* the document and inspect it to make sure the PDF is correctly produced.

Your bulleted list...

Additional formatting commands will be introduced gradually throughout the rest of the labs.

<!---
To make a "comment" in an R Markdown document, use the syntax on the lines preceding and following this message. All the text within the 'arrows' does not appear in the knitted PDF, similar to how lines preceded with a # in R are not executed as code.
--->

5. To start a new page in the PDF document, enter the text 'newpage' preceded by a backslash, as in...(new page coming in the PDF!)

\newpage

### Using R with R Markdown

The real power of R Markdown is that it allows for R programs to be included in the Rmd file, with both the program and its output automatically being produced in the PDF document.

R programs in an Rmd file are located in **code chunks**, which appear as grey-shaded blocks (see below). You can embed an R code chunk by either typing the three backticks (`) followed by an "r" enclosed in braces, then the additional three backticks to close the chunk, or simply press the *Insert Chunk* button from the *Chunks* menu to the right of the Knit icon in the toolbar above the script editor. 

6. Datasets for the labs are contained within the *oibiostat* package. To view which datasets are included in the package, go to the "Packages" tab and scroll down to *oibiostat*; clicking the blue hyperlink opens the documentation page that lists the datasets included in the package.

7. The following code chunks use data included in the package. To load the package, use the \texttt{library} command. This command only needs to be used once in a document, in the first R chunk that requires data from the package. The \texttt{data()} command can be used to load a particular dataset from the package; once the command is run, the name of the dataset will appear in the Environment tab.

    ```{r message=FALSE}
library(mosaic)      #loads the mosaic package
library(oibiostat)   #loads the oibiostat package
data(frog)           #loads the frog dataset
mean(~ egg.size, data=frog)
```

8. It is also possible to view the output of a code chunk without having to *Knit* the entire document. 

   - To run a single line, place your cursor on the line you want to run and press Ctrl/Cmd + Enter. Try this out with the lines in the following chunk. The output appears directly below the code. To clear the output, press the X in the upper right hand corner of the preview.
 
   - To run an entire chunk, place your cursor within the chunk and press Ctrl/Cmd + Shift + Enter. Try this out in the following chunk. The output is now accessible between the two panes.
 
   - The Run drop-down menu in the upper right hand corner of the script editor provides other options for running chunks, such as running all chunks above or below a certain point. The gear drop-down menu, next to the *Knit* button, provides options for expanding or collapsing all output in a document.

    ```{r, fig.dim = c(4.5,2.5)}
gf_histogram(~egg.size, data=frog)
median(~egg.size, data=frog)
```

### Loading Datasets

\centerline{\includegraphics[width=0.8\textwidth]{smallData}}

9. Datasets are not always in R packages; in most cases, datasets are entered/imported to R from alternate sources.  [This website](https://www.geeksforgeeks.org/how-to-create-multiple-csv-files-from-existing-csv-file-using-pandas/) contains the small data set pictured above.  One way to *build* a data frame containing this data is in the following code:

    ```{r}
customerData = data.frame(
 CustomerID = c(1:10),
 Gender = c("Male","Female","Female","Male","Male","Female","Male","Male","Female","Male"),
 Age = c(20,21,19,18,25,26,32,41,20,19),
 AnnualIncome = c(10,20,30,10,25,60,70,15,21,22),
 SpendingScore = c(30,50,48,84,90,65,32,46,12,56)
)
customerData    # asks R to display what the constructed data frame
```

    You can save what you've built, which could be useful if this same data frame might be needed in the future.  R can save it in a number of different formats, but to save it as a `.csv` file, you can do the following,
    
    ```{r eval=FALSE}
write.csv(customerData, "sampleDataFile.csv")
```
    
    which saves it under the file name "sampleDataFile.csv".  One can put a path in front of the file name, in order to be more intentional about the folder into which the file is placed; as it is, the file will be created in your current working directory.
    
    In the code, change eval=FALSE to eval=TRUE, and then *Knit* the document.  Then locate the newly-created .csv file in your workspace (see the **Files** tab).  You might try creating a folder---perhaps call it `practice` or something appropriate---in your workspace.  Then modify the `write.csv()` command above before doing another *Knit* of the document, with the aim of saving this .csv file in your newly-created folder.

10. At a later time, even if you are working out of a different directory, you can reload the data via

    ```{r eval=FALSE}
# Note: You can assign a different name; the data isn't wed to the original name
custDat = read.csv("~/PATH_TO_FOLDER/sampleDataFile.csv")
```
    
11. The following code will produce side-by-side boxplots, one for each gender in \texttt{customerData}). To run the code, change eval=FALSE to eval=TRUE. *Knit* the document. The plot should then be visible in the PDF output. Any new R chunks you create default to the eval = TRUE option.

    ```{r, eval = FALSE}
# produce side-by-side boxplots, one for each gender
gf_boxplot(AnnualIncome ~ Gender, data = customerData)
```

    Once you have viewed the graphic, try changing the order of the two variables, `AnnualIncome` and `Gender` (that is, trade positions about the tilde $\sim$ character).  Answer the question in your report: Which of these two presentations do you prefer?

12. When you run code from an R script file, it is virtually the same as if you had typed that code directly in the console.  This is not the case, however, when you *Knit* an R Markdown document.  Try this exercise.  The code block that follows has the eval=FALSE designation; for the moment, leave it that way.  You can still execute the code in this block, much as you do individual commands in an R script file, by clicking the sideways-facing green triangle on the right side of the code block.  

    ```{r eval=FALSE}
ssurv = read.csv("http://scofield.site/teaching/data/csv/ssurv.csv")
dim(ssurv)      # gives the number of rows and columns in the object ssurv
```

    The command, along with its result, appears in the console.  But if you change eval=FALSE to eval=TRUE, not in the prior code block, but in the *next* one, and then *Knit* the document, you may be surprised at the result; the full *Knit* cannot be carried out, despite the fact that the object `ssurv` is *known* to the console.
    
    ```{r eval=FALSE}
names(ssurv)
```

    The fix is easy enough: simply change eval=FALSE to eval=TRUE in the code block where `ssurv.csv` is *read*, in order to make `ssurv` *known* to the knitter, as well.

    During the knitting process, the document is being compiled line-by-line. If there is no command to load a dataset within the R Markdown file, any commands that require the dataset will not be able to run.  Additionally, the document is compiled in order; i.e., from top to bottom. If, for example, the command to read \texttt{ssurv.csv} appeared *after* the `names()` command, an error message (the same as the one you already saw) would appear. Once the error is detected, the compiler does not "read further" into the document. Thus, when working with data files, be sure to check that they are loaded within the R Markdown file itself, whether loading an individual file (as in the case of `ssurv.csv` above), or requiring an entire package.

### R Script versus R Markdown

An R Script file can be thought of as one large code chunk; R script files are only meant to contain R commands with short plain-text comments. R Markdown files consist of both code, output, and plain text.

R script files are useful when the primary goal is to explore a dataset or test short R programs. R Markdown files are ideal for preparing documents that need to contain both explanatory text and statistical output, such as a lab report. 

Congratulations! You have reached the end of Lab 0. 
